<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>design-patterns on LTDev</title><link>https://develtar.github.io/tags/design-patterns/</link><description>Recent content in design-patterns on LTDev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 24 Aug 2023 11:31:28 +0200</lastBuildDate><atom:link href="https://develtar.github.io/tags/design-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Improving QML code readability with singleton</title><link>https://develtar.github.io/posts/qt-improving-qml-readability-with-singletons/</link><pubDate>Thu, 24 Aug 2023 11:31:28 +0200</pubDate><guid>https://develtar.github.io/posts/qt-improving-qml-readability-with-singletons/</guid><description>This article explains how to take advantage of the singleton pattern in QML, to develope a clean and a structured utility class.
The singleton pattern is a software design pattern that ensures a class has one instance, providing a global point of access to it. Due to its global access, it is one of the most controversial pattern, and can lead to design problems if used incorrectly.
Advantages:
it is initialized only when itâ€™s requested for the first time it can simplify code by making easier to access shared resources it can improve performance by avoiding the need to create multiple instances of a class Disadvantages:</description></item></channel></rss>